@page "/signup"
@using System.Net.Http
@using BlazorMaui.Services.Interfaces
@using ValidatorLib
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

@inject IAuthService AuthService
@inject HttpClient Client
@inject NavigationManager Navigation

<h1 class="text-white">Signup</h1>
<div class="form-container">
    <EditForm Model="@loginModel" OnValidSubmit="SignupUser">


        <div>
            <label class="text-white">Email:</label>
            <InputText @bind-Value="loginModel.Email" Type="email" @oninput="e => HandleFieldChanged(e, nameof(loginModel.Email))" />
            <p style="color: red;">@emailErrorMessage</p>
        </div>

        <div>
            <label class="text-white">Password:</label>
            <InputText @bind-Value="loginModel.Password" Type="password" @oninput="e => HandleFieldChanged(e, nameof(loginModel.Password))" />
            <div>@passwordErrorMessage</div>
        </div>

        <button class="btn btn-primary " type="submit">Signup</button>
    </EditForm>
</div>
@if (!string.IsNullOrEmpty(loadingMessage))
{
    <div style="margin:20px;">@loadingMessage</div>

}

@if (errorMessage != null)
{
    <div class="error-message">@errorMessage</div>
}

@code {
    private LoginModel loginModel = new();

    private string? loadingMessage;
    private string? errorMessage;
    private string? emailErrorMessage;
    private string? passwordErrorMessage;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }

    }

    private void HandleFieldChanged(ChangeEventArgs e, string fieldName)
    {
        var fieldValue = e.Value?.ToString() ?? string.Empty;

        if (fieldName == nameof(loginModel.Email))
        {
            emailErrorMessage = string.IsNullOrEmpty(fieldValue) || !fieldValue.Contains("@")
                ? "Invalid email format."
                : null;
        }
        else if (fieldName == nameof(loginModel.Password))
        {
            passwordErrorMessage = string.IsNullOrEmpty(fieldValue) || fieldValue.Length < 6
                ? "Password must be at least 6 characters."
                : null;
        }
    }

    private async Task SignupUser()
    {
        var json = JsonSerializer.Serialize(loginModel);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        try
        {
            var response = await Client.PostAsync("http://192.168.1.174:5106/api/auth/signup", content);

            if (response.IsSuccessStatusCode)
            {
                var tokenJson = await response.Content.ReadAsStringAsync();
                var token = JsonSerializer.Deserialize<TokenModel>(tokenJson);
                await AuthService.SaveTokenAsync(token.Token);
                isAuthenticated = true;
                errorMessage = null;
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                isAuthenticated = false;
                errorMessage = "User exists: " + response.StatusCode;
            }

        }
        catch (Exception e)
        {
            loadingMessage = "";
            // errorMessage = "Error authenticating, internal error. Contact us.";
            errorMessage = e.Message;


        }
    }

    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class TokenModel
    {
        public string Token { get; set; }
    }
}
