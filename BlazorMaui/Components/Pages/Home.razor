@page "/"
@using BlazorMaui.Components
@using BlazorMaui
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@using BlazorMaui.Services.Interfaces

@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject HttpClient Client


<h1 class="text-white">@(isAuthenticated ? "Welcome" : "Sign in or create an account")</h1>
@if (isLoading)
{
    <div>Loading...</div>
}
else if (isAuthenticated)
{
    <p class="text-white-50">Logged in as @userEmail</p>

    <button @onclick="Logout">Logout</button>

    <div class="d-flex flex-wrap">
        @foreach (var tab in tabs)
        {


            <a class="playlist-customlink card container-body border-3 m-m-lg-3"
            @onclick="()=>GoToTab(tab)"
            style="flex: 0 0 calc(50% - 2rem);">

                <div class=" p-2 ">
                    <div class="card-title p-2 rounded-1 text-white" style="minimum-width: 10px;">@tab.Title</div>
                    <div class="card-subtitle p-1 rounded-1 text-white-50 text-sm" style="minimum-width: 10px;"> click see more</div>
                </div>
            </a>

        }
    </div>

}
else
{

    <button class="btn btn-primary" @onclick=" () => GoToLogin()">Login</button>
    <button class="btn btn-primary" @onclick="() => GoToSignup()">Signup</button>


    <div>
        @message
    </div>
}



<style>
    .playlist-customlink {
        text-decoration: inherit;
    }

        .playlist-customlink:hover {
            cursor: pointer;
        }

    .container-body {
        border-left-color: white;
        color: white;
        background-color: rgb(33,33,33, 0.4);
        margin: 7px;
    }

        .container-body:hover {
            border-left-color: darkslateblue; /* Changes background color on hover */
            color: white; /* Changes text color */
        }
</style>
@code {
    private bool isAuthenticated;
    private string message = "";
    private string userEmail = "";
    private bool isLoading = true;
    private List<Link> tabs = new()
    {
        new Link
        {
            Title="My local library",
            Path="/mylibrary"
        },
        new Link
        {
            Title="My cloud library",
            Path="/cloudlibrary"
        },
        new Link
        {
            Title="My playlists",
            Path="MyPlaylists"
        }
    };

    class Link
    {
        public string Title { get; set; }
        public string Path { get; set; }
    }

    private async Task GoToTab(Link tab)
    {
        Navigation.NavigateTo(tab.Path);
    }

    protected override async Task OnInitializedAsync()
    {
        MainPage.Instance.HideAudioElement();
        isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
        if (isAuthenticated)
        {

            try
            {
                var token = await AuthService.GetTokenAsync();
                Client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

                var rawRes = await Client.GetAsync("http://192.168.1.174:5106/api/auth/profile");
                var options = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
                var jsonResponse = await rawRes.Content.ReadAsStringAsync();
                var user = JsonSerializer.Deserialize<User>(jsonResponse, options);
                userEmail = user.Email;
                AuthService.StoreUserId(user.Id);
                isLoading = false;
            }
            catch (Exception e)
            {
                message = e.Message;
                isLoading = false;

            }
        }
        isLoading = false;
    }

    private async Task GoToLogin()
    {
        Navigation.NavigateTo("/login");

    }
    private async Task GoToSignup()
    {
        Navigation.NavigateTo("/signup");
    }


    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
    }
}
