@page "/dashboardMobile"
@using BlazorMaui.Services.Interfaces
@using BlazorMaui.Components;
@inject IBeatsService BeatsService
@inject NavigationManager Navigation
@inject IJSRuntime JS
<h3>Dashboard</h3>


Genre
<select @onchange="OnGenreChanged">
    <option value="">All</option>
    @foreach (var genre in AvailableGenres)
    {
        <option value="@genre">@genre</option>
    }
</select>
@if (isLoading)
{
    <div class="text-white-50">Loading...</div>
}


@foreach (var beat in FilteredBeats)
{


    @* <AudioCard Beat="@beat" /> *@
    <div class="audio-player">
        @* <div class="album-cover"></div> *@
        <div class="player-controls">
            <div class="song-info">
                <div class="song-title"> @beat.Title</div>
                @* <p class="artist">Artist</p> *@
            </div>
            <div class="buttons">
                <button @onclick=" () => OnPlayBtnClick(beat.AudioUrl)" class="play-btn-2 "><svg viewBox="0 0 16 16" class="bi bi-play-fill" fill="currentColor" height="16" width="16" xmlns="http://www.w3.org/2000/svg" style="color: white"> <path fill="white" d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path> </svg></button>
                
            </div>
        </div>
    </div>


}






@code {
    protected async override void OnInitialized()
    {

        // BeatsService.LoadUploaded();
        isLoading = true;
        await BeatsService.GetAudioFromServer();
        isLoading = false;
        StateHasChanged();
        MainPage.Instance.ShowAudioElement();
        MainPage.Instance.MediaEnded += OnAudioEnded;
        base.OnInitialized();

    }
    private bool isLoading;
    private async void OnPlayBtnClick(string file)
    {
        await BeatsService.StreamAudioFromServer(Path.GetFileName(file));
    }

    private void OnAudioEnded()
    {
        // Called when audio finishes
        InvokeAsync(StateHasChanged);
    }

    // Compute the available genres from the uploaded beats.
    private IEnumerable<string> AvailableGenres =>
        BeatsService.UploadedAudioFromServer.Select(b => b.Genre).Distinct();

    // Filter the beats based on the selected genre.
    private IEnumerable<Beat> FilteredBeats =>
        isLoading ? new List<Beat>() :
        string.IsNullOrEmpty(selectedGenre)
            ? BeatsService.UploadedAudioFromServer
            : BeatsService.UploadedAudioFromServer.Where(b => b.Genre == selectedGenre);

    private void OnGenreChanged(ChangeEventArgs e)
    {
        selectedGenre = e.Value?.ToString() ?? "";
        // Force re-render
        StateHasChanged();
    }

    public bool ReRender;
    private string? currentTrack;
    private string selectedGenre = "";



    private List<FileResult>? selectedFiles;



    private async void PlayAudio(string selectedAudio)
    {
        if (string.IsNullOrEmpty(selectedAudio)) return;
        string audioPath = Path.Combine(FileSystem.AppDataDirectory, selectedAudio);
        await BeatsService.StreamAudioFromServer(Path.GetFileName(selectedAudio));
    }

    private void PauseAudio() => MainPage.Instance.PauseAudio();
    private void StopAudio() => MainPage.Instance.StopAudio();


    private void HandlePlayBtn(string url)
    {

        if (currentTrack == url && MainPage.Instance.IsPlaying)
        {
            MainPage.Instance.IsPlaying = false;
            PauseAudio();
        }
        else if (currentTrack != url && MainPage.Instance.IsPlaying)
        {
            PlayAudio(url);
            currentTrack = url;
        }
        else
        {
            PlayAudio(url);
            currentTrack = url;
            MainPage.Instance.IsPlaying = true;
        }
    }





}
