@page "/cloudlibrary"
@using BlazorMaui.Services.Interfaces
@using BlazorMaui.Components
@inject IBeatsService BeatsService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
<h3>Cloud Library</h3>


Genre
<select @onchange="OnGenreChanged">
    <option value="">All</option>
    @foreach (var genre in AvailableGenres)
    {
                <option value="@genre">@genre</option>
    }
</select>
@if (isLoading)
{
            <div class="text-white-50">Loading...</div>
            <div class="audio-player">
        @* <div class="album-cover"></div> *@
                <div class="player-controls">
                    <div class="song-info">
                        <div class="song-title"> </div>
                        <p class="artist">Bpm</p>
                    </div>
                    <div class=" waveform-container">

                @* <div class="progress" style="width: @((widthUnit == 0  && CompareMediaSoruce(beat)) ? 0 : widthUnit)% ;"></div> *@


                        <!-- static waveform -->
                        <div class="waveform static-waveform">
                        </div>

                        <!-- Progress waveform -->
                        <div class="waveform dynamic-waveform ">
                        </div>


                    </div>
                    <div class="buttons">
                        <Button CssClass="play-btn-2 "><svg viewBox="0 0 16 16" class="bi bi-play-fill" fill="currentColor" height="16" width="16" xmlns="http://www.w3.org/2000/svg" style="color: white"> <path fill="white" d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path> </svg></Button>
                        <Button>Edit</Button>
                    </div>

                </div>
            </div>
}

@if (isAuthorized)
{

    @foreach (var beat in FilteredBeats)
    {


        @* <AudioCard Beat="@beat" /> *@
                        <div class="audio-player">
            @* <div class="album-cover"></div> *@
                            <div class="player-controls">
                                <div class="song-info">
                                    <div class="song-title"> @beat.Title</div>
                                    <p class="artist">@beat.Genre @beat.Bpm Bpm</p>
                                </div>
                                <div class=" waveform-container">

                    @* <div class="progress" style="width: @((widthUnit == 0  && CompareMediaSoruce(beat)) ? 0 : widthUnit)% ;"></div> *@


                                    <!-- static waveform -->
                                    <div class="waveform static-waveform">

                                        <img src="data:image/bmp;base64,@beat.WaveFormImageBase64" draggable="false" />
                                    </div>

                                    <!-- Progress waveform -->
                                    <div class="waveform dynamic-waveform @(currentlyPlaying == beat ? "isPlaying" : "")">
                                        <img src="data:image/bmp;base64,@beat.WaveFormImageBase64" draggable="false" />
                                    </div>


                                </div>

                @* <input ref="slider" type="range" min="0" max="@waveformWidth" value="@widthUnit" @oninput="OnSliderChanged" class="waveform-slider" /> *@


                            </div>


                            <div class="buttons">
                                <Button OnClick=" async () => await OnPlayBtnClick(beat)" CssClass="play-btn-2 "><svg viewBox="0 0 16 16" class="bi bi-play-fill" fill="currentColor" height="16" width="16" xmlns="http://www.w3.org/2000/svg" style="color: white"> <path fill="white" d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path> </svg></Button>
                                <Button OnClick=" async() => await HandleOnEdit(beat.Id)">Edit</Button>
                            </div>

                        </div>



    }

}
else
{
            <h2 class="white-50">You need to be logged in</h2>
}
<style>
    .waveform-container {
    position: relative;
    width: 100%;
    height: 120px; /* Increased height to fit both waveforms */
    border: 3px solid: rgb(33,33,33, 0.7);
    position: relative; /* Makes child `absolute` elements position relative to this */

    display: flex;
    flex-direction: column; /* Stack waveforms vertically */
    overflow: hidden;
    align-items: flex-start;
    }

    /* Waveform elements */
    .waveform {
    width: 100%;
    height: 70%; /* Each waveform takes half the container */
    overflow: hidden;
    }

    /* Static waveform - on top */
    .static-waveform {
    background-color: transparent; /* Example background */
    opacity: 0.25;
    overflow: hidden;
    width: 100%;
    }

    /* Dynamic waveform - below */
    .dynamic-waveform {
    position: absolute; /* Overlays are stacked over the base */
    display: flex;
    justify-content: start; /* Align content in flex manner */
    align-items: flex-start;
    background-color: transparent; /* Example background */
    overflow: hidden;
    }

    .isPlaying {
    width: @(widthUnit + "px");
    }

</style>



@code {
    protected async override Task OnInitializedAsync()
    {
        isAuthorized = await AuthService.IsUserAuthenticatedAsync();
        InvokeAsync(StateHasChanged);
        var task = BeatsService.GetAudioFromServer();
        MainPage.Instance.ShowAudioElement();
        MainPage.Instance.MediaEnded += OnAudioEnded;

        MainPage.Instance.AudioSlider.ValueChanged += OnPositionChanged;
        await task;
        isLoading = false;
        InvokeAsync(StateHasChanged); // Trigger re-render

    }

    private bool isAuthorized;
    private async Task HandleOnEdit(int id)
    {
        Navigation.NavigateTo($"/editbeat/{id}");
    }

    private int wavePos = 0;

    private bool isLoading = true;
    private async Task OnPlayBtnClick(Beat beat)
    {
        currentlyPlaying = beat;
        await BeatsService.StreamAudioFromServer(Path.GetFileName(beat.AudioUrl));

        var url = "http://localhost:5106/api/audio/stream/" + Path.GetFileName(beat.AudioUrl);
        InvokeAsync(StateHasChanged); // Trigger re-render
        // await JS.InvokeVoidAsync("loadWaveForm", url);
    }

    private async void OnAudioEnded()
    {
        // Called when audio finishes
        InvokeAsync(StateHasChanged);
    }

    // Compute the available genres from the uploaded beats.
    private IEnumerable<string> AvailableGenres =>
    BeatsService.UploadedAudioFromServer.Select(b => b.Genre).Distinct();

    // Filter the beats based on the selected genre.
    private IEnumerable<Beat> FilteredBeats =>
    isLoading ? new List<Beat>() :
    string.IsNullOrEmpty(selectedGenre)
    ? BeatsService.UploadedAudioFromServer
    : BeatsService.UploadedAudioFromServer.Where(b => b.Genre == selectedGenre);

    private async void OnGenreChanged(ChangeEventArgs e)
    {
        selectedGenre = e.Value?.ToString() ?? "";
        // Force re-render
        InvokeAsync(StateHasChanged); // Trigger re-render
    }

    public bool ReRender;
    private string? currentTrack;
    private string selectedGenre = "";



    private List<FileResult>? selectedFiles;



    private async void PlayAudio(string selectedAudio)
    {
        if (string.IsNullOrEmpty(selectedAudio)) return;
        string audioPath = Path.Combine(FileSystem.AppDataDirectory, selectedAudio);
        await BeatsService.StreamAudioFromServer(Path.GetFileName(selectedAudio));
    }

    private void PauseAudio() => MainPage.Instance.PauseAudio();
    private void StopAudio() => MainPage.Instance.StopAudio();

    private Beat? currentlyPlaying;

    private void HandlePlayBtn(string url)
    {

        if (currentTrack == url && MainPage.Instance.IsPlaying)
        {
            MainPage.Instance.IsPlaying = false;
            PauseAudio();
        }
        else if (currentTrack != url && MainPage.Instance.IsPlaying)
        {
            PlayAudio(url);
            currentTrack = url;
        }
        else
        {
            PlayAudio(url);
            currentTrack = url;
            MainPage.Instance.IsPlaying = true;
        }
    }


    private double AddWidth()
    {
        var totalms = MainPage.Instance.MediaPlayer.Duration.TotalMilliseconds;
        var widthUnit = totalms / waveformWidth;
        StateHasChanged();
        return widthUnit;
    }
    private int widthUnit;
    private int waveformWidth = 710;

    private async void OnPositionChanged(object? sender, EventArgs e)
    {
        var totalms = MainPage.Instance.AudioSlider.Maximum;
        if (totalms <= 0) return; // Prevent division by zero

        var currentms = MainPage.Instance.AudioSlider.Value;
        widthUnit = (int)Math.Floor((currentms / totalms) * waveformWidth);


        await InvokeAsync(StateHasChanged); // Trigger re-render
    }
}
