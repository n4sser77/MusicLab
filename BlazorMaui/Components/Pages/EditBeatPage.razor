@page "/EditBeat/{Id:int?}"
@using BlazorMaui.Components;
@using BlazorMaui.Services.Interfaces
@using System.Diagnostics
@using System.Net.Http.Headers
@using Shared.Dtos
@using System.Text.Json
@using System.Text
@inject NavigationManager Navigation
@inject IBeatsService BeatsService
@inject IAuthService Auth

<h1>Beat: @newBeat.Title</h1>

<div>
    <label>Title:</label>
    <input @bind="newBeat.Title" />
</div>

<div>
    <label>BPM:</label>
    <input type="number" @bind="newBeat.Bpm" />
</div>

<div>
    <label>Genre:</label>
    <input @bind="newBeat.Genre" />
</div>


<Button OnClick="() => SaveChanges()">
    @((isSaving != null) ? "Saving..." : "Save")
</Button>
<Button OnClick="async () => await PublishAudio()">
    @((publishMessage != null) ? "Publishing..." : "Publish")
</Button>
<Button onClick="async () => await TrigerDeleteWarning()" CssClass="btn-danger">
    @((deleteMessage != null) ? "Are you sure?" : "Delete")
</Button>

<Button onclick="async () => await HandleVisibility()">
    Toggle visibility:@(newBeat.IsVisible ? "public" : "private")
</Button>

<Button onClick=" () => HandleCancel()">
    Cancel
</Button>

<div class="h-50">
    <span class="text-white-50 font-monospace">@deleteMessage</span>
</div>
@code {
    private Beat newBeat;
    private Beat oldBeat;
    private string? isSaving;
    private string? publishMessage;
    private string? deleteMessage;

    [Parameter]
    public int? Id { get; set; }



    protected override async void OnInitialized()
    {

        newBeat = BeatsService.FileToEdit == null ? BeatsService.UploadedAudioFromServer.FirstOrDefault(a => a.Id == Id)
        : BeatsService.FileToEdit;
        oldBeat = newBeat;

    }
    private async Task PublishAudio()
    {
        if (!await Auth.IsUserAuthenticatedAsync())
        {
            return;
        }
        var isSuccess = await BeatsService.PublishAudio(newBeat, Auth.UserId);
        if (!isSuccess)
        {
            publishMessage = "Failed to publish";
            return;
        }

        publishMessage = "Published successfully";

    }
    private async Task TrigerDeleteWarning()
    {
        if (string.IsNullOrEmpty(deleteMessage))
        {
            deleteMessage = "Are you sure you want to delete this file? Click delete again";
            return;
        }

        if (BeatsService.FileToEdit == null)
        {
            await DeleteBeatFromCloud(newBeat.Id);
            Navigation.NavigateTo("/cloudlibrary");
            return;
        }


        if (await BeatsService.DeleteLocalAudio(oldBeat))
        {

            Navigation.NavigateTo("/mylibrary");
        }
    }

    private async Task SaveChanges()
    {

        isSaving = "Saving...";
        StateHasChanged();
        await Task.Delay(400);
        if (BeatsService.FileToEdit == null)
        {
            await UpdateBeatToCloud(newBeat.Id);
            Navigation.NavigateTo("cloudlibrary");
            return;
        }
        BeatsService.UpdateAudio(newBeat, oldBeat);
        Navigation.NavigateTo("/mylibrary");
        BeatsService.FileToEdit = null;
    }
    private async Task HandleCancel()
    {
        if (BeatsService.FileToEdit != null) Navigation.NavigateTo("/mylibrary");
        else Navigation.NavigateTo("cloudlibrary");

    }
    private async Task DeleteBeatFromCloud(int id)
    {
        string serverUrlLocalHost = "http://localhost:5106/api/audio/delete/" + id;
        HttpClient client = new HttpClient();
        try
        {
            var token = await Auth.GetTokenAsync();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var res = await client.DeleteAsync(serverUrlLocalHost);
            if (res.IsSuccessStatusCode) return;

        }
        catch (Exception e)
        {

            Debug.WriteLine(e.Message);

        }
    }
    private async Task UpdateBeatToCloud(int id)
    {
        string serverUrlLocalHost = "http://localhost:5106/api/audio/update/" + id;
        HttpClient client = new HttpClient();
        try
        {
            var token = await Auth.GetTokenAsync();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var beatData = new MusicMetadataDto()
                {
                    Title = newBeat.Title,
                    Bpm = newBeat.Bpm,
                    Genre = newBeat.Genre,
                    FilePath = newBeat.AudioUrl,
                    Id = newBeat.Id,


                };
            var jsonBody = JsonSerializer.Serialize(beatData);

            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PutAsync(serverUrlLocalHost, content);

            if (response.IsSuccessStatusCode)
            {
                Debug.WriteLine("Success");
                Navigation.NavigateTo("/cloudlibrary");
            }
            else
            {
                Debug.WriteLine("Failed");
            }
        }
        catch (Exception e)
        {
            Debug.WriteLine(e.Message);

        }

    }

    private async Task HandleVisibility()
    {
        newBeat.IsVisible = !newBeat.IsVisible;
    }
}
